* Emacs configuration

** Utility functions

#+begin_src elisp
  (defun mac? () (eq system-type 'darwin))
#+end_src

** Better defaults

Sourced from [[https://git.sr.ht/~technomancy/better-defaults][~technomancy/better-defaults]], among other places.

#+begin_src elisp
  (setq frame-inhibit-implied-resize t)
  (setq ring-bell-function #'ignore)
  (setq dired-auto-revert-buffer t)
  (setq tab-always-indent 'complete)
  (setq eshell-scroll-to-bottom-on-input 'this)
  (setq mouse-yank-at-point t)
  (setq backup-by-copying t)
  (setq backup-directory-alist `(("." . ,(concat user-emacs-directory "backups"))))
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (setq load-prefer-newer t)
  (setq require-final-newline t)
  (setq-default indent-tabs-mode nil)


  (add-hook 'compilation-filter-hook #'ansi-color-compilation-filter)

  (use-package repeat
    :config
    (repeat-mode))

  (use-package uniquify
    :config
    (setq uniquify-buffer-name-style 'forward))

  (use-package savehist
    :init
    (savehist-mode))
#+end_src

** Package initialization

#+begin_src elisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

** UI stuff

#+begin_src elisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (defun my--configure-fonts ()
    "Configure your default font family and size."
    (let ((base (if (mac?) "Hack 14" "Hack 11")))
      (custom-set-faces
       `(default ((t :font ,base)))
       `(fixed-pitch ((t :inherit (default))))
       `(default ((t :inherit (default)))))))

  (add-hook 'emacs-startup-hook #'my--configure-fonts)

  (use-package ef-themes
    :ensure t
    :config
    (ef-themes-select 'ef-trio-dark))
#+end_src

** OS-specific tweaks

#+begin_src elisp
  (use-package exec-path-from-shell
    :if (mac?)
    :ensure t
    :config
    (exec-path-from-shell-initialize))
#+end_src

** Searching, minibuffers, and completions

#+begin_src elisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)
    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t))

  (use-package marginalia
    :ensure t
    :after vertico
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the
    ;; binding available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :init
    ;; Marginalia must be activated in the :init section of use-package
    ;; such that the mode gets enabled right away.  Note that this
    ;; forces loading the package.
    (marginalia-mode))

  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

  (use-package consult
    :ensure t
    :bind (("C-s" . consult-line)
           :map minibuffer-local-map
           ("C-r" . consult-history))
    :custom
    (completion-in-region-function #'consult-completion-in-region))

  (use-package corfu
    :ensure t
    :hook ((prog-mod . corfu-mode)
           (shell-mode . corfu-mode)
           (eshell-mode . corfu-mode))
    :custom
    (corfu-auto t)
    (corfu-auto-delay 0.25)
    (corfu-auto-prefix 2))

  (use-package cape
    :ensure t
    :init
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block))
#+end_src

** Programming

#+begin_src elisp
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)

  (use-package treesit-auto
    :ensure t
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))

  (use-package zig-mode
    :ensure t)
#+end_src

** Writing

#+begin_src elisp
  (use-package markdown-mode
    :ensure t)

  ;; Note: requires libenchant
  (use-package jinx
    :ensure t
    :hook ((markdown-mode . jinx-mode)))
#+end_src

** Custom elisp

#+begin_src elisp
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+end_src
